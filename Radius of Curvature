import numpy as np
import matplotlib.pyplot as plt
import cv2 as cv
from scipy      import optimize
from scipy      import  odr

## This code can be used for both the arcs

img1 = cv.imread('Insert_name_of_isolated_arc_here',0)
img1 =np.array(img1)
i=0
x=[]
y=[]
j=0
for i in range(img1.shape[0]) :
    for j in range (img1.shape[1]):
        if img1[i,j] >170:  ##Choice of the gray values where pixels above get filtered out and below survive. Choice must be made to reduce image noise around arc 
                              ##but have enough pixels to see the arc shape
            img1[i,j]=0
        else:
            x.append(j)
            y.append(img1.shape[0]-i)


##Below code from https://scipy-cookbook.readthedocs.io/items/Least_Squares_Circle.html

def calc_R(xc, yc):
    """ calculate the distance of each 2D points from the center (xc, yc) """
    return np.sqrt((x-xc)**2 + (y-yc)**2)

def f_2(c):
""" calculate the algebraic distance between the data points and the mean circle centered at c=(xc, yc) """
    Ri = calc_R(*c)
    return Ri - Ri.mean()

center_estimate = ##,## insert intial estimates here
center, ier_2 = optimize.leastsq(f_2, center_estimate)

xc, yc = center
Ri       = calc_R(*center)
R       = Ri.mean()
residu   = sum((Ri - R)**2)

print(R)
print(np.std(Ri))
uc=np.sqrt(residu/(len(x)-2))
print(uc)

circle=plt.Circle((xc,yc),R,fill=False)
figure, axes = plt.subplots()
axes.add_artist(circle)
plt.plot(x,y,'o',markersize=1, label='Track Points')
plt.xlabel('Pixel Number')
plt.ylabel('Pixel Number')
plt.show()
